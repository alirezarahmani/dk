<?php

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\DependencyInjection\Container;
use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException;
use Symfony\Component\DependencyInjection\Exception\LogicException;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;
use Symfony\Component\DependencyInjection\ParameterBag\FrozenParameterBag;
use Symfony\Component\DependencyInjection\ParameterBag\ParameterBagInterface;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class MyCachedContainer extends Container
{
    protected $parameters = [];

    public function __construct()
    {
        $this->services = $this->privates = [];
        $this->methodMap = [
            'Digikala\\Lib\\Notifications\\Sms' => 'getSmsService',
            'Digikala\\Repository\\Persistence\\NotificationRepository' => 'getNotificationRepositoryService',
            'Digikala\\Services\\MemcachedService' => 'getMemcachedServiceService',
            'Digikala\\Services\\NotificationService' => 'getNotificationServiceService',
            'Digikala\\Services\\QueueService' => 'getQueueServiceService',
            'Digikala\\Services\\RedisService' => 'getRedisServiceService',
            'Digikala\\Storage\\MemcachedCacheStorage' => 'getMemcachedCacheStorageService',
        ];

        $this->aliases = [];
    }

    public function compile(): void
    {
        throw new LogicException('You cannot compile a dumped container that was already compiled.');
    }

    public function isCompiled(): bool
    {
        return true;
    }

    public function getRemovedIds(): array
    {
        return [
            'Psr\\Container\\ContainerInterface' => true,
            'Symfony\\Component\\DependencyInjection\\ContainerInterface' => true,
        ];
    }

    /**
     * Gets the public 'Digikala\Lib\Notifications\Sms' shared service.
     *
     * @return \Digikala\Lib\Notifications\Sms
     */
    protected function getSmsService()
    {
        return $this->services['Digikala\\Lib\\Notifications\\Sms'] = new \Digikala\Lib\Notifications\Sms();
    }

    /**
     * Gets the public 'Digikala\Repository\Persistence\NotificationRepository' shared service.
     *
     * @return \Digikala\Repository\Persistence\NotificationRepository
     */
    protected function getNotificationRepositoryService()
    {
        return $this->services['Digikala\\Repository\\Persistence\\NotificationRepository'] = new \Digikala\Repository\Persistence\NotificationRepository();
    }

    /**
     * Gets the public 'Digikala\Services\MemcachedService' shared service.
     *
     * @return \Digikala\Services\MemcachedService
     */
    protected function getMemcachedServiceService()
    {
        return $this->services['Digikala\\Services\\MemcachedService'] = new \Digikala\Services\MemcachedService();
    }

    /**
     * Gets the public 'Digikala\Services\NotificationService' shared service.
     *
     * @return \Digikala\Services\NotificationService
     */
    protected function getNotificationServiceService()
    {
        return $this->services['Digikala\\Services\\NotificationService'] = new \Digikala\Services\NotificationService(($this->services['Digikala\\Lib\\Notifications\\Sms'] ?? ($this->services['Digikala\\Lib\\Notifications\\Sms'] = new \Digikala\Lib\Notifications\Sms())), ($this->services['Digikala\\Repository\\Persistence\\NotificationRepository'] ?? ($this->services['Digikala\\Repository\\Persistence\\NotificationRepository'] = new \Digikala\Repository\Persistence\NotificationRepository())), ($this->services['Digikala\\Services\\QueueService'] ?? $this->getQueueServiceService()));
    }

    /**
     * Gets the public 'Digikala\Services\QueueService' shared service.
     *
     * @return \Digikala\Services\QueueService
     */
    protected function getQueueServiceService()
    {
        return $this->services['Digikala\\Services\\QueueService'] = new \Digikala\Services\QueueService(($this->services['Digikala\\Services\\RedisService'] ?? ($this->services['Digikala\\Services\\RedisService'] = new \Digikala\Services\RedisService())));
    }

    /**
     * Gets the public 'Digikala\Services\RedisService' shared service.
     *
     * @return \Digikala\Services\RedisService
     */
    protected function getRedisServiceService()
    {
        return $this->services['Digikala\\Services\\RedisService'] = new \Digikala\Services\RedisService();
    }

    /**
     * Gets the public 'Digikala\Storage\MemcachedCacheStorage' shared service.
     *
     * @return \Digikala\Storage\MemcachedCacheStorage
     */
    protected function getMemcachedCacheStorageService()
    {
        return $this->services['Digikala\\Storage\\MemcachedCacheStorage'] = new \Digikala\Storage\MemcachedCacheStorage(($this->services['Digikala\\Services\\MemcachedService'] ?? ($this->services['Digikala\\Services\\MemcachedService'] = new \Digikala\Services\MemcachedService())));
    }
}
